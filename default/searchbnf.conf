[matchtable-command]
syntax = matchtable \
    (inputcols=<list>)? \
    (outputcols=<list>)? \
    (lookup=<string>)? \
    (where=<string>)? \
    (debug=<string>)
shortdesc = BMC-ish match table
description = Finds the row that matches the specified lookup.\p\\
    based on inputcols specified, in the order left to right\
    using equals then starts/ends with and finally contains fields last.\p\\
    Returns outputcols evaluating any substitutions as per the\
    string_template command.
comment1 = example
example1 = | matchtable inputcols="host,object,parameter" outputcols="severity,resolver_group" lookup="my_match_table.csv"
usage = public
appears-in = ps_commands
tags = ps_commands
maintainer = anapier@splunk.com
category = streaming

[barocstringformat-command]
syntax = barocstringformat \
    (input_field=<string>)? \
    (output_field=<string>)? \
    (debug=<string>)
alias =
shortdesc = Parse baroc logical statements to strings.
description = \
    This command ...
comment1 = \
    This example ..
example1 = | barocstringformat input_field=this_field output_field=new debug=true
category = streaming
appears-in = ps_commands
maintainer = anapier@splunk.com
usage = public
tags = ps_commands

[matchtablerex-command]
syntax = matchtablerex \
    (regex=<string>)? \
    (field=<string>)? \
    (outputcols=<list>)? \
    (lookup=<string>)? \
    (where=<string>)?\
    (sort=<string>)?

shortdesc = match table using regex
description = Finds the row that contains the field that matches the specified regex.\p\\
    Returns the first match found based on the supplied sort order if any.
comment1 = example
example1 = | matchtablerex regex="host_name" field="host" outputcols="severity,resolver_group" lookup="my_match_table_rex.csv" sort="- order"
usage = public
appears-in = ps_commands
tags = ps_commands
maintainer = anapier@splunk.com
category = streaming

[episodeupdate-command]
syntax = episodeupdate \
    (group=<fieldname>)? \
    (policy=<fieldname>)? \
    (owner=<fieldname>)? \
    (severity=<fieldname>)? \
    (status=<fieldname>)? \
    (break_episode=<fieldname>)? \
    (title=<fieldname>)? \
    (description=<fieldname>)?
shortdesc = Updates an ITSI Notable Event Episode
description = This command doc needs a rewrite ....\p\\
    By default the command expects the incoming events\
    to contain field names itsi_group_id, itsi_policy_id,\
    owner, severity, title, description that contain the\
    ID of the notable event group, the ID of the corresponding\
    notable event aggregation policy associated to the episode,\
    the name of the owner, severity (numeric value), title.\
    and description. You can use the options group, policy,\
    owner, severity, title, and description, respectively to\
    define other field names to be used.
comment1 = does stuff
example1 = | episodeupdate
comment2 = does other stuff
example2 = | episodeupdate break_episode
usage = public
appears-in = ps_commands
tags = ps_commands
maintainer = anapier@splunk.com
category = streaming

[blaggert-command]
syntax = episodeupdate \
    (token=<string>)? \
    (server=<string>)? \
    (port=<int>)? \
    (severity=<fieldname>)? \
shortdesc = Post events to HEC
description = This command doc needs a rewrite ....\p\\
    blag some HEC events\
    k?
comment1 = does stuff
example1 = | blah
comment2 = does other stuff
example2 = | blah blah
usage = public
appears-in = ps_commands
tags = ps_commands
maintainer = anapier@splunk.com
category = streaming